<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CrowdInsights_Done" xml:space="preserve">
    <value>That was an interesting audience! Anything else?</value>
  </data>
  <data name="CrowdInsights_PictureSent" xml:space="preserve">
    <value>Wow, great crowd! Let me think for a second...</value>
  </data>
  <data name="CrowdInsights_PictureStart" xml:space="preserve">
    <value>Show me how the crowd looks and I'll let you know!</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>I'm sorry, something went wrong.</value>
  </data>
  <data name="Introduce_AskName" xml:space="preserve">
    <value>Hi! Could you tell me your name?</value>
  </data>
  <data name="Introduce_Done" xml:space="preserve">
    <value>It was nice to meet you, is there anything else I can do for you? Good luck with your presentation!</value>
  </data>
  <data name="Introduction_Choice" xml:space="preserve">
    <value>What would you like to share?</value>
  </data>
  <data name="Introduction_HobbiesHeroes" xml:space="preserve">
    <value>That's great! {0} are probably your heroes!</value>
  </data>
  <data name="Introduction_HobbiesStart" xml:space="preserve">
    <value>You're obviously a developer since you built me! Do you have other hobbies?</value>
  </data>
  <data name="Introduction_Introduce" xml:space="preserve">
    <value>Hello {0}, nice to meet you! My name is Vocalis and I can help you with your presentation. But first, tell me more about you!</value>
  </data>
  <data name="Introduction_PictureSent" xml:space="preserve">
    <value>Let me take a good look at you...</value>
  </data>
  <data name="Introduction_PictureStart" xml:space="preserve">
    <value>Just send me a selfie to show me how you look!</value>
  </data>
  <data name="Introduction_Restart" xml:space="preserve">
    <value>Interesting! Do you want to share something else {0}?</value>
  </data>
  <data name="Introduction_UnknownStart" xml:space="preserve">
    <value>I don't know that IntroductionType.</value>
  </data>
  <data name="None_Empty" xml:space="preserve">
    <value>I'm sorry, I don't know what you want.. Care to ask something different?</value>
  </data>
  <data name="PlayGame_CorrectGuess" xml:space="preserve">
    <value>That's correct! Your word: [{0}]. What's your next guess?</value>
  </data>
  <data name="PlayGame_Done" xml:space="preserve">
    <value>I hope you enjoyed that game!</value>
  </data>
  <data name="PlayGame_Lost" xml:space="preserve">
    <value>You lost! [{0}] was your word. Want to play again?</value>
  </data>
  <data name="PlayGame_Retry" xml:space="preserve">
    <value>Let's give it another go, shall we? Type any character to guess, type 'quit' to stop.</value>
  </data>
  <data name="PlayGame_Start" xml:space="preserve">
    <value>Sweet, let's play a game of Hangman! Type any character to guess, type 'quit' to stop.</value>
  </data>
  <data name="PlayGame_Won" xml:space="preserve">
    <value>You won! [{0}] was your word. Want to play again?</value>
  </data>
  <data name="SendPicture_Clarify" xml:space="preserve">
    <value>You wanted to see what exactly?</value>
  </data>
  <data name="SendPicture_Done" xml:space="preserve">
    <value>I hope you liked what I showed you! Anything else you need?</value>
  </data>
  <data name="SendPicture_Start" xml:space="preserve">
    <value>Sure, give me a second...</value>
  </data>
</root>